{
  "pipelineSpec": {
    "components": {
      "comp-call-spotify-api-artist": {
        "executorLabel": "exec-call-spotify-api-artist",
        "inputDefinitions": {
          "parameters": {
            "batch_size": {
              "type": "INT"
            },
            "batches_to_store": {
              "type": "INT"
            },
            "client_id": {
              "type": "STRING"
            },
            "client_secret": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "sleep_param": {
              "type": "DOUBLE"
            },
            "target_table": {
              "type": "STRING"
            },
            "unique_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "done_message": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-call-spotify-api-audio": {
        "executorLabel": "exec-call-spotify-api-audio",
        "inputDefinitions": {
          "parameters": {
            "batch_size": {
              "type": "INT"
            },
            "batches_to_store": {
              "type": "INT"
            },
            "client_id": {
              "type": "STRING"
            },
            "client_secret": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "sleep_param": {
              "type": "DOUBLE"
            },
            "target_table": {
              "type": "STRING"
            },
            "unique_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "done_message": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-call-spotify-api-artist": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "call_spotify_api_artist"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'fsspec' ' google-cloud-bigquery' 'google-cloud-storage' 'gcsfs' 'tqdm' 'spotipy' 'requests' 'db-dtypes' 'numpy' 'pandas' 'pyarrow' 'absl-py' 'pandas-gbq==0.17.4' 'google-cloud-secret-manager' 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef call_spotify_api_artist(\n    project: str,\n    location: str,\n    unique_table: str,\n    batch_size: int,\n    batches_to_store: int,\n    client_id: str,\n    client_secret: str,\n    sleep_param: float,\n    target_table: str,\n) -> NamedTuple('Outputs', [\n    ('done_message', str),\n]):\n    print(f'pip install complete')\n\n    import os\n\n    import spotipy\n    from spotipy.oauth2 import SpotifyClientCredentials\n\n    import re\n    import warnings\n    warnings.simplefilter(action='ignore', category=FutureWarning)\n\n    import pandas as pd\n    import json\n    import time\n    import numpy as np\n\n    from google.cloud import storage\n    import gcsfs\n    from google.cloud import bigquery\n\n    from requests.exceptions import ReadTimeout, HTTPError, ConnectionError, RequestException\n    from absl import logging\n\n    import pandas_gbq\n    pd.options.mode.chained_assignment = None  # default='warn'\n    from google.cloud.exceptions import NotFound\n\n    from multiprocessing import Process\n    import multiprocessing\n\n    logging.set_verbosity(logging.INFO)\n    logging.info(f'package import complete')\n\n    storage_client = storage.Client(\n        project=project\n    )\n\n    logging.info(f'spotipy auth complete')\n\n    def spot_artist_features(uri, client_id, client_secret):\n\n        # Authenticate\n        client_credentials_manager = SpotifyClientCredentials(\n            client_id=client_id, \n            client_secret=client_secret\n        )\n        sp = spotipy.Spotify(\n            client_credentials_manager = client_credentials_manager, \n            requests_timeout=2, \n            retries=1 )\n\n        ############################################################################\n        # Create Track Audio Features DF\n        ############################################################################ \n\n        # uri = [u.replace('spotify:artist:', '') for u in uri] #fix the quotes \n\n        artists = sp.artists(uri)\n        features = pd.json_normalize(artists['artists'])\n        smaller_features = features[['genres', 'popularity', 'name', 'followers.total']]\n        smaller_features.columns = ['genres_list',  'artist_pop', 'name',  'followers']\n        smaller_features['artist_uri'] = uri\n        smaller_features['genres'] = smaller_features['genres_list'].map(lambda x: f\"{x}\")\n        return smaller_features[['genres', 'artist_pop', 'artist_uri', 'followers']]\n\n\n    bq_client = bigquery.Client(\n      project=project, location='US'\n    )\n\n    #check if target table exists and if so return a list to not duplicate records\n    try:\n        bq_client.get_table(target_table)  # Make an API request.\n        logging.info(\"Table {} already exists.\".format(target_table))\n        target_table_incomplete_query = f\"select distinct artist_uri from `{target_table}`\"\n        loaded_tracks_df = bq_client.query(target_table_incomplete_query).result().to_dataframe()\n        loaded_tracks = loaded_tracks_df.artist_uri.to_list()\n\n    except NotFound:\n        logging.info(\"Table {} is not found.\".format(target_table))\n\n\n    query = f\"select distinct artist_uri from `{unique_table}`\"\n\n\n    schema = [\n        {'name': 'artist_pop', 'type': 'INTEGER'},\n        {'name':'genres', 'type': 'STRING'},\n        {'name':'followers', 'type': 'INTEGER'},\n        {'name':'artist_uri', 'type': 'STRING'}\n    ]\n\n\n    tracks = bq_client.query(query).result().to_dataframe()\n    track_list = tracks.artist_uri.to_list()\n    logging.info(f'finished downloading tracks')\n\n    from tqdm import tqdm\n    def process_track_list(track_list):\n        uri_list_length = len(track_list)-1 #starting count at zero\n        inner_batch_count = 0 #avoiding calling the api on 0th iteration\n        uri_batch = []\n        for i, uri in enumerate(tqdm(track_list)):\n            uri_batch.append(uri)\n            if (len(uri_batch) == batch_size or uri_list_length == i) and i > 0: #grab a batch of 50 songs\n                ### Try catch block for function\n                try:\n                    audio_featureDF = spot_artist_features(uri_batch, client_id, client_secret)\n                    time.sleep(sleep_param)\n                    uri_batch = []\n\n                except ReadTimeout:\n                    logging.info(\"'Spotify timed out... trying again...'\")\n                    audio_featureDF = spot_artist_features(uri_batch, client_id, client_secret)\n                    uri_batch = []\n                    time.sleep(sleep_param)\n\n                except HTTPError as err: #JW ADDED\n                    logging.info(f\"HTTP Error: {err}\")\n\n                except spotipy.exceptions.SpotifyException as spotify_error: #jw_added\n                    logging.info(f\"Spotify error: {spotify_error}\")\n\n                # Accumulate batches on the machine before writing to BQ\n                # if inner_batch_count <= batches_to_store or uri_list_length == i:\n\n                if inner_batch_count == 0:\n                    appended_data = audio_featureDF\n                    # logging.info(f\"creating new appended data at IBC: {inner_batch_count} \\n i: {i}\")\n                    inner_batch_count += 1\n\n                elif uri_list_length == i or inner_batch_count == batches_to_store: #send the batches to bq\n                    appended_data = pd.concat([audio_featureDF, appended_data])\n                    inner_batch_count = 0\n                    appended_data.to_gbq(\n                        destination_table=target_table, \n                        project_id=f'{project}', \n                        location='US', \n                        table_schema=schema,\n                        progress_bar=False, \n                        reauth=False, \n                        if_exists='append'\n                    )\n                    logging.info(f'{i+1} of {uri_list_length} complete!')\n\n                else:\n                    appended_data = pd.concat([audio_featureDF, appended_data])\n                    inner_batch_count += 1\n\n        logging.info(f'audio features appended')\n\n    #multiprocessing portion - we will loop based on the modulus of the track_uri list\n    #chunk the list \n\n    # Yield successive n-sized\n    # chunks from l.\n    def divide_chunks(l, n):\n        # looping till length l\n        for i in range(0, len(l), n):\n            yield l[i:i + n]\n\n    n_cores = multiprocessing.cpu_count() \n    chunked_tracks = list(divide_chunks(track_list, int(len(track_list)/n_cores))) # produces a list of lists chunked evenly by groups of n_cores\n\n    logging.info(\n        f\"\"\"total tracks downloaded: {len(track_list)}\\n\n        length of chunked_tracks: {len(chunked_tracks)}\\n \n        and inner dims: {[len(x) for x in chunked_tracks]}\n        \"\"\"\n    )\n\n    procs = []\n    def create_job(target, *args):\n        p = multiprocessing.Process(target=target, args=args)\n        p.start()\n        return p\n\n    # starting process with arguments\n    for track_chunk in chunked_tracks:\n        proc = create_job(process_track_list, track_chunk)\n        time.sleep(np.pi)\n        procs.append(proc)\n\n    # complete the processes\n    for proc in procs:\n        proc.join()\n\n    # process_track_list(track_list)\n    logging.info(f'artist features appended')\n\n    return (\n          f'DONE',\n      )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-call-spotify-api-audio": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "call_spotify_api_audio"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'fsspec' 'google-cloud-bigquery' 'google-cloud-storage' 'gcsfs' 'spotipy' 'requests' 'db-dtypes' 'numpy' 'pandas' 'pyarrow' 'absl-py' 'pandas-gbq==0.17.4' 'tqdm' 'kfp==1.8.22' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef call_spotify_api_audio(\n    project: str,\n    location: str,\n    client_id: str,\n    batch_size: int,\n    batches_to_store: int,\n    target_table: str,\n    client_secret: str,\n    unique_table: str,\n    sleep_param: float,\n) -> NamedTuple('Outputs', [\n    ('done_message', str),\n]):\n    print(f'pip install complete')\n    import os\n\n    import spotipy\n    from spotipy.oauth2 import SpotifyClientCredentials\n\n    import re\n    import warnings\n    warnings.simplefilter(action='ignore', category=FutureWarning)\n\n    import pandas as pd\n    import json\n    import time\n    import numpy as np\n\n    from requests.exceptions import ReadTimeout, HTTPError, ConnectionError, RequestException\n    from absl import logging\n\n    from google.cloud import storage\n    import gcsfs\n    from google.cloud import bigquery\n\n    import pandas_gbq\n    from multiprocessing import Process\n    from tqdm import tqdm\n    from tqdm.contrib.logging import logging_redirect_tqdm\n\n    from google.cloud.exceptions import NotFound\n\n    import multiprocessing\n\n    # print(f'package import complete')\n\n    logging.set_verbosity(logging.INFO)\n    logging.info(f'package import complete')\n\n\n    bq_client = bigquery.Client(\n      project=project, location=location\n    )\n\n    def spot_audio_features(uri, client_id, client_secret):\n\n        # Authenticate\n        client_credentials_manager = SpotifyClientCredentials(\n            client_id=client_id, \n            client_secret=client_secret\n        )\n        sp = spotipy.Spotify(\n            client_credentials_manager = client_credentials_manager, \n            requests_timeout=10, \n            retries=10\n        )\n        ############################################################################\n        # Create Track Audio Features DF\n        ############################################################################\n\n        uri_stripped = [u.replace('spotify:track:', '') for u in uri] #fix the quotes \n        #getting track popularity\n        tracks = sp.tracks(uri_stripped)\n        #Audio features\n        time.sleep(sleep_param)\n\n        a_feats = sp.audio_features(uri)\n        features = pd.json_normalize(a_feats)#.to_dict('list')\n\n        features['track_pop'] = pd.json_normalize(tracks['tracks'])['popularity']\n\n        features['track_uri'] = uri\n        return features\n\n    bq_client = bigquery.Client(\n        project=project, \n        location='US'\n    )\n\n    #check if target table exists and if so return a list to not duplicate records\n    try:\n        bq_client.get_table(target_table)  # Make an API request.\n        logging.info(\"Table {} already exists.\".format(target_table))\n        target_table_incomplete_query = f\"select distinct track_uri from `{target_table}`\"\n        loaded_tracks_df = bq_client.query(target_table_incomplete_query).result().to_dataframe()\n        loaded_tracks = loaded_tracks_df.track_uri.to_list()\n\n    except NotFound:\n        logging.info(\"Table {} is not found.\".format(target_table))\n\n    query = f\"select distinct track_uri from `{unique_table}`\" \n\n    #refactor\n    schema = [{'name':'danceability', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'energy', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'key', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'loudness', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'mode', 'type': 'INTEGER', \"mode\": \"NULLABLE\"},\n        {'name':'speechiness', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'acousticness', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'instrumentalness', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'liveness', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'valence', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'tempo', 'type': 'FLOAT', \"mode\": \"NULLABLE\"},\n        {'name':'type', 'type': 'STRING', \"mode\": \"NULLABLE\"},\n        {'name':'id', 'type': 'STRING', \"mode\": \"NULLABLE\"},\n        {'name':'uri', 'type': 'STRING', \"mode\": \"NULLABLE\"},\n        {'name':'track_href', 'type': 'STRING', \"mode\": \"NULLABLE\"},\n        {'name':'analysis_url', 'type': 'STRING', \"mode\": \"NULLABLE\"},\n        {'name':'duration_ms', 'type': 'INTEGER', \"mode\": \"NULLABLE\"},\n        {'name':'time_signature', 'type': 'INTEGER', \"mode\": \"NULLABLE\"},\n        {'name':'track_pop', 'type': 'INTEGER', \"mode\": \"NULLABLE\"},\n        {'name':'track_uri', 'type': 'STRING', \"mode\": \"REQUIRED\"},\n    ]\n\n    tracks = bq_client.query(query).result().to_dataframe()\n    track_list = tracks.track_uri.to_list()\n    logging.info(f'finished downloading tracks')\n\n\n    ### This section is used when there are tracks already loaded into BQ and you want to resume loading the data\n    try:\n        track_list = list(set(track_list) - set(loaded_tracks)) #sets the new track list to remove already loaded data in BQ\n    except:\n        pass\n\n\n    from tqdm import tqdm\n    def process_track_list(track_list):\n\n        uri_list_length = len(track_list)-1 #starting count at zero\n        inner_batch_count = 0 #avoiding calling the api on 0th iteration\n        uri_batch = []\n\n        for i, uri in enumerate(tqdm(track_list)):\n            uri_batch.append(uri)\n            if (len(uri_batch) == batch_size or uri_list_length == i) and i > 0: #grab a batch of 50 songs\n                    # logging.info(f\"appending final record for nth song at: {inner_batch_count} \\n i: {i} \\n uri_batch length: {len(uri_batch)}\")\n                    ### Try catch block for function\n                try:\n                    audio_featureDF = spot_audio_features(uri_batch, client_id, client_secret)\n                    time.sleep(sleep_param)\n                    uri_batch = []\n                except ReadTimeout:\n                    logging.info(\"'Spotify timed out... trying again...'\")\n                    audio_featureDF = spot_audio_features(uri_batch, client_id, client_secret)\n\n                    uri_batch = []\n                    time.sleep(sleep_param)\n\n                except HTTPError as err: #JW ADDED\n                    logging.info(f\"HTTP Error: {err}\")\n\n                except spotipy.exceptions.SpotifyException as spotify_error: #jw_added\n                    logging.info(f\"Spotify error: {spotify_error}\")\n\n                # Accumulate batches on the machine before writing to BQ\n                # if inner_batch_count <= batches_to_store or uri_list_length == i:\n                if inner_batch_count == 0:\n                    appended_data = audio_featureDF\n                    # logging.info(f\"creating new appended data at IBC: {inner_batch_count} \\n i: {i}\")\n                    inner_batch_count += 1\n                elif uri_list_length == i or inner_batch_count == batches_to_store: #send the batches to bq\n                    appended_data = pd.concat([audio_featureDF, appended_data])\n                    inner_batch_count = 0\n                    appended_data.to_gbq(\n                        destination_table=target_table, \n                        project_id=f'{project}', \n                        location='US', \n                        table_schema=schema,\n                        progress_bar=False, \n                        reauth=False, \n                        if_exists='append'\n                    )\n                    logging.info(f'{i+1} of {uri_list_length} complete!')\n                else:\n                    appended_data = pd.concat([audio_featureDF, appended_data])\n                    inner_batch_count += 1\n\n        logging.info(f'audio features appended')\n\n    #multiprocessing portion - we will loop based on the modulus of the track_uri list\n    #chunk the list \n\n    # Yield successive n-sized\n    # chunks from l.\n    def divide_chunks(l, n):\n        # looping till length l\n        for i in range(0, len(l), n):\n            yield l[i:i + n]\n\n    n_cores = multiprocessing.cpu_count() \n    chunked_tracks = list(divide_chunks(track_list, int(len(track_list)/n_cores))) #produces a list of lists chunked evenly by groups of n_cores\n\n    logging.info(\n        f\"\"\"\n        total tracks downloaded: {len(track_list)}\\n\n        length of chunked_tracks: {len(chunked_tracks)}\\n \n        and inner dims: {[len(x) for x in chunked_tracks]}\n        \"\"\"\n    )\n\n    procs = []\n\n    def create_job(target, *args):\n        p = multiprocessing.Process(target=target, args=args)\n        p.start()\n        return p\n\n    # starting process with arguments\n    for track_chunk in chunked_tracks:\n        proc = create_job(process_track_list, track_chunk)\n        time.sleep(np.pi)\n        procs.append(proc)\n\n    # complete the processes\n    for proc in procs:\n        proc.join()\n\n    # process_track_list(track_list) #single thread\n\n    logging.info(f'audio features appended')\n\n    return (\n          f'DONE',\n      )\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "spotify-feature-enrichment-pipe-v1-spotify-feature-enrich"
    },
    "root": {
      "dag": {
        "tasks": {
          "call-spotify-api-artist": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-call-spotify-api-artist"
            },
            "inputs": {
              "parameters": {
                "batch_size": {
                  "componentInputParameter": "batch_size"
                },
                "batches_to_store": {
                  "componentInputParameter": "batches_to_store"
                },
                "client_id": {
                  "componentInputParameter": "spotify_id"
                },
                "client_secret": {
                  "componentInputParameter": "spotify_secret"
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "sleep_param": {
                  "componentInputParameter": "sleep_param"
                },
                "target_table": {
                  "componentInputParameter": "target_table_artist"
                },
                "unique_table": {
                  "componentInputParameter": "unique_table"
                }
              }
            },
            "taskInfo": {
              "name": "Get Artist Features From Spotify API"
            }
          },
          "call-spotify-api-audio": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-call-spotify-api-audio"
            },
            "dependentTasks": [
              "call-spotify-api-artist"
            ],
            "inputs": {
              "parameters": {
                "batch_size": {
                  "componentInputParameter": "batch_size"
                },
                "batches_to_store": {
                  "componentInputParameter": "batches_to_store"
                },
                "client_id": {
                  "componentInputParameter": "spotify_id"
                },
                "client_secret": {
                  "componentInputParameter": "spotify_secret"
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "sleep_param": {
                  "componentInputParameter": "sleep_param"
                },
                "target_table": {
                  "componentInputParameter": "target_table_audio"
                },
                "unique_table": {
                  "componentInputParameter": "unique_table"
                }
              }
            },
            "taskInfo": {
              "name": "Get Track Audio Features From Spotify API"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "batch_size": {
            "type": "INT"
          },
          "batches_to_store": {
            "type": "INT"
          },
          "location": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "sleep_param": {
            "type": "DOUBLE"
          },
          "spotify_id": {
            "type": "STRING"
          },
          "spotify_secret": {
            "type": "STRING"
          },
          "target_table_artist": {
            "type": "STRING"
          },
          "target_table_audio": {
            "type": "STRING"
          },
          "target_table_popularity": {
            "type": "STRING"
          },
          "unique_table": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.22"
  },
  "runtimeConfig": {
    "parameters": {
      "spotify_id": {
        "stringValue": "c9dfb2904ba941a192265351fb847bae"
      },
      "spotify_secret": {
        "stringValue": "fd0055c5d56645eb84a74ca3a6914a18"
      }
    }
  }
}